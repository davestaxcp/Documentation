"use strict";(self.webpackChunkxcpdoc=self.webpackChunkxcpdoc||[]).push([[5680],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||l[m]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4731:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={title:"Using multisig with counterparty-server"},c=void 0,u={unversionedId:"advanced/advanced-usage/multisig",id:"advanced/advanced-usage/multisig",title:"Using multisig with counterparty-server",description:'"Bare Multisig" (i.e. not P2SH) is supported with Counterparty. This document shows you how to use it with counterparty-server on testnet.',source:"@site/docs/advanced/advanced-usage/multisig.md",sourceDirName:"advanced/advanced-usage",slug:"/advanced/advanced-usage/multisig",permalink:"/docs/advanced/advanced-usage/multisig",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/advanced/advanced-usage/multisig.md",tags:[],version:"current",frontMatter:{title:"Using multisig with counterparty-server"},sidebar:"advanced",previous:{title:"How to send Counterparty assets in bulk",permalink:"/docs/advanced/advanced-usage/sending-bulk"},next:{title:"Getting started",permalink:"/docs/advanced/federated-node/getting-started"}},d=[{value:"Making a Multisig Tx",id:"making-a-multisig-tx",children:[],level:3}],l={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'"Bare Multisig" (i.e. not P2SH) is supported with Counterparty. This document shows you how to use it with ',(0,i.kt)("inlineCode",{parentName:"p"},"counterparty-server")," on testnet."),(0,i.kt)("h3",{id:"making-a-multisig-tx"},"Making a Multisig Tx"),(0,i.kt)("p",null,"An example testnet multi\u2010sig source transaction is tx hash ",(0,i.kt)("em",{parentName:"p"},"e06d22276699de6ed1c5322133b0968114067ce833120bb9126182a1ad19de83")),(0,i.kt)("p",null,"Here's how you can make a multisig transaction:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\n  counterpartyd.py --unconfirmed --testnet --database-file=test.db send --source='1_mn6q3dS2EnDUx3bmyWc6D4szJNVGtaR7zc_mfzSPkV7kAYma5oxZ37pHkw9qtwAEQx8Wy_2' --destination='mn6q3dS2EnDUx3bmyWc6D4szJNVGtaR7zc' --quantity=.1337 --asset=XCP\n\n")),(0,i.kt)("p",null,"So that's a 1-of-2 multisig address that the 0.1337 XCP would be sent to.\xa0"),(0,i.kt)("p",null,"The multisig addresses are represented as such a string as\xa0'{m}",(0,i.kt)("em",{parentName:"p"},"{address}"),"{address}",(0,i.kt)("em",{parentName:"p"},"{address}"),"{n}', where the addresses\xa0(pubkeyhashes)\xa0are sorted\xa0alphabetically/numerically.\xa0"),(0,i.kt)("p",null,"1-of-2, 2-of-2, 1-of-3, 2-of-3 and 3-of-3\xa0are supported at the moment.\xa0"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"NOTE:"),"\xa0Each address in a multisig source must have already made\xa0",(0,i.kt)("strong",{parentName:"em"},"at least one non-multisig transaction"),"\xa0in the blockchain, for counterpartyd to be able to retrieve its pubkey from the blockchain."),"  "),(0,i.kt)("p",null,"You can sign transactions with ",(0,i.kt)("inlineCode",{parentName:"p"},"bitcoind signrawtransaction"),"; broadcast\xa0with ",(0,i.kt)("inlineCode",{parentName:"p"},"sendrawtransaction"),"."))}p.isMDXComponent=!0}}]);